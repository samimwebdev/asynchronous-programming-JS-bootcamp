API(Application programming Interface) and communication
========================================
specialization and communication 
Medium of communication
You -  Me  (knowledge-javacript)
coomunication(Between 2 Application) - API (Application programming Interface) 
Data Exchange
  1) XML(extensible markup language)
  2) JSON (javascript object notation)
      - Look like object, array string
      - really is String     


Procedure of communication
===================================
CRUD and Request Feature
(Structuring -REST API)


(3rd party application server)-Book list

facebook.com/nahid
path- /nahid
API Development - Server side  (javascript/python/java)

Full structure: 
====================================
R-READ       GET       /books
R-READ       GET       /book/:id
C-CREATE     POST      /books
U-UPDATE     PUT/PATCH /books/:id  
D-DELETE     DELETE    /books/:id

How to communicate
=================================
  XMLHttpRequest(old)
  FETCH(MORE MODERN)
  Axios

/* old way */ 
const xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState === 4 && this.status === 200) {
       // Typical action to be performed when the document is ready:
       document.getElementById("demo").innerHTML = xhttp.responseText;
    }
};
xhttp.open("GET", "filename", true);
xhttp.send();

/* Modern approach */ 
* Work in Promise way
fetch('http://example.com/movies.json')
  .then(response => response.json())
  .then(data => console.log(data));


How to Deal the data
==================================
  Asynchronous programming pattern
    callback
    promise
    Async await (syntactic sugar)
    class- use constructor function (syntactic sugar) 



Asynchronous programming: youtuve series

Demonstration
===============================
DOCS: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
https://github.com/axios/axios
Server: https://jsonplaceholder.typicode.com/


//synchronous
//Asynchronous
console.log(1)
console.log(2)
// not done Immediately
//=============================
//setTimeout
setTimeout(function () {
  console.log(3)
}, 2000)
// API request(network Request)
//Database request
// I/O
console.log(4)
console.log(5)
console.log(6)

//Javascript is single threaded
//one task at a time
//one person
//1)core javascript part(V8 engine)
//2) browser part(microtask queue, queue)





